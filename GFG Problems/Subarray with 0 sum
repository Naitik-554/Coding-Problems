class Solution{
    public:
    //Complete this function
    //Function to check whether there is a subarray present with 0-sum or not.
    bool subArrayExists(int arr[], int n)
    {
        int sum = 0;
        unordered_map<int,bool> map;
        for(int i=0; i<n; i++) {
            sum += arr[i];
            
            if(sum == 0 || map[sum] == true)
                return true;
                
            map[sum] = true;
        }
        
        return false;
    }
};



class Solution{
    public:
    //Complete this function
    //Function to check whether there is a subarray present with 0-sum or not.
    bool subArrayExists(int arr[], int n)
    {
        int prefix = 0;
        unordered_set<int> s;
        for(int i=0; i<n; i++) {
            prefix += arr[i];
            if(prefix == 0)
                return true;
            if(s.find(prefix) != s.end()) 
            return true;
            s.insert(prefix);
        }
        return false;
    }
};
